<?xml version="1.0" encoding="utf-8"?>

<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             alpha.disabledStates="0.5">

    <fx:Metadata>
        <![CDATA[
        [HostComponent("spark.components.CheckBox")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        import global.Color;
        import global.Icons;

        /* Define the symbol fill items that should be colored by the "symbolColor" style. */
        static private const symbols:Array = ["checkMarkFill"];

        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
    </fx:Script>

    <fx:Script>
        <![CDATA[
        private static const focusExclusions:Array = ["labelDisplay"];

        override public function get focusSkinExclusions():Array
        {
            return focusExclusions;
        };

        override public function styleChanged(styleProp:String):void
        {
            super.styleChanged(styleProp);

            // Check if the style is null for mass style changes or if the labelPlacement/gap styles were changed
            if (styleProp == "labelPlacement" || styleProp == "gap" || styleProp === null)
                updateLabelPlacement();
        }

        public function updateLabelPlacement():void
        {
            if (!checkDisplay || !labelDisplay)
                return;

            //Adjust the label to right side.
            labelDisplay.verticalCenter = 0;
            labelDisplay.top            = 0;
            labelDisplay.bottom         = 0;
            labelDisplay.left           = checkDisplay.width + 5;
            labelDisplay.right          = 0;

            //Adjust the checkbox to left side.
            checkDisplay.verticalCenter = 0;
            checkDisplay.left           = 0;
        }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="up" />
        <s:State name="over"
                 stateGroups="overStates" />
        <s:State name="down"
                 stateGroups="downStates" />
        <s:State name="disabled"
                 stateGroups="disabledStates" />
        <s:State name="upAndSelected"
                 stateGroups="selectedStates" />
        <s:State name="overAndSelected"
                 stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected"
                 stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected"
                 stateGroups="disabledStates, selectedStates" />
    </s:states>

    <!-- Checkbox container -->
    <s:Group id="checkDisplay"
             verticalCenter="0"
             width="30"
             height="30">

        <!--Checkmark-->
        <s:HGroup width="100%"
                  height="100%"
                  horizontalAlign="center"
                  verticalAlign="middle">
            <s:BitmapImage id="image"
                           source="{Icons.SwitchOff}"
                           source.selectedStates="{Icons.SwitchOn}"
                           width="24"
                           height="24"
                           smooth="true"
                           alpha=".8"
                           alpha.overStates="1" />
        </s:HGroup>
    </s:Group>

    <!-- Label -->
    <s:Label id="labelDisplay"
             textAlign="start"
             verticalAlign="middle"
             maxDisplayedLines="1" />

</s:SparkSkin>
